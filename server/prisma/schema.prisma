generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "sqlserver"
  url      = env("LTI_DATABASE_URL")
}

model Student {
  id              String  @id @default(uuid())
  name            String
  email           String  @unique
  assignedTopicId String? @map("assigned_topic_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  studentCourseCompletions StudentCourseCompletion[]
  studentTopicPreferences  StudentTopicPreference[]

  assignedTopic Topic? @relation(fields: [assignedTopicId], references: [id])

  @@map("student")
}

model Instructor {
  id      String   @id @default(uuid())
  name    String
  email   String   @unique
  min     Int
  max     Int
  isAdmin Boolean? @map("is_admin")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  topics Topic[]

  @@map("instructor")
}

model Topic {
  id           String @id @default(uuid())
  title        String
  description  String
  capacity     Int
  type         String // 'normal' | 'tdk' | 'research' | 'internship'
  instructorId String @map("instructor_id")
  language     String @default("hu")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  studentTopicPreferences StudentTopicPreference[]
  topicCoursePreferences  TopicCoursePreference[]
  assignedStudents        Student[]

  instructor Instructor @relation(fields: [instructorId], references: [id])

  @@unique([title, instructorId])
  @@map("topic")
}

model Course {
  id     String @id @default(uuid())
  code   String @unique
  name   String
  credit Int

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  studentCourseCompletions StudentCourseCompletion[]
  topicCoursePreferences   TopicCoursePreference[]

  @@map("course")
}

model StudentCourseCompletion {
  studentId String @map("student_id")
  courseId  String @map("course_id")
  grade     Float

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  course  Course  @relation(fields: [courseId], references: [id])
  student Student @relation(fields: [studentId], references: [id])

  @@id([studentId, courseId])
  @@map("student_course_completion")
}

model StudentTopicPreference {
  studentId String @map("student_id")
  topicId   String @map("topic_id")
  rank      Int

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  student Student @relation(fields: [studentId], references: [id])
  topic   Topic   @relation(fields: [topicId], references: [id], onUpdate: NoAction)

  @@id([studentId, topicId])
  @@map("student_topic_preference")
}

model TopicCoursePreference {
  topicId  String  @map("topic_id")
  courseId String  @map("course_id")
  weight   Decimal

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  course Course @relation(fields: [courseId], references: [id])
  topic  Topic  @relation(fields: [topicId], references: [id])

  @@id([topicId, courseId])
  @@map("topic_course_preference")
}
